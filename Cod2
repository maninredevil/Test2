@RestController
@RequestMapping("/kdcproxy")
@RequiredArgsConstructor
public class KdcProxyController {

    private static final String KDC_HOST = "idm.example.com";
    private static final int KDC_PORT = 88;

    @PostMapping(consumes = MediaType.APPLICATION_OCTET_STREAM_VALUE, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public ResponseEntity<byte[]> forwardToKdc(@RequestBody byte[] requestData,
                                               @RequestHeader(value = "Content-Length", required = false) Integer contentLength) {
        try {
            if (requestData.length == 0 || (contentLength != null && contentLength == 0)) {
                return ResponseEntity.badRequest().build();
            }

            byte[] responseData = sendToKdcWithProxyFormat(requestData);
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .header("Content-Length", String.valueOf(responseData.length))
                    .body(responseData);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.BAD_GATEWAY).build();
        }
    }

    private byte[] sendToKdcWithProxyFormat(byte[] requestData) throws IOException {
        try (Socket socket = new Socket(KDC_HOST, KDC_PORT);
             OutputStream outputStream = socket.getOutputStream();
             InputStream inputStream = socket.getInputStream()) {

            // Оборачиваем в KDC Proxy Format (RFC 8070)
            ByteArrayOutputStream wrappedRequest = new ByteArrayOutputStream();
            wrappedRequest.write(0x00); // Версия = 0
            wrappedRequest.write(0x00); // Зарезервировано
            wrappedRequest.write((requestData.length >> 8) & 0xFF); // Длина запроса (2 байта)
            wrappedRequest.write(requestData.length & 0xFF);
            wrappedRequest.write(requestData);

            // Отправляем запрос в KDC
            outputStream.write(wrappedRequest.toByteArray());
            outputStream.flush();

            // Читаем 4-байтовый заголовок
            byte[] header = new byte[4];
            if (inputStream.read(header) != 4) {
                throw new IOException("Invalid KDC Proxy response header");
            }

            // Определяем длину ответа
            int length = ((header[2] & 0xFF) << 8) | (header[3] & 0xFF);
            if (length == 0) {
                throw new IOException("Empty response from KDC");
            }

            // Читаем ответ
            ByteArrayOutputStream responseBuffer = new ByteArrayOutputStream();
            byte[] buffer = new byte[4096];
            int totalBytesRead = 0;

            while (totalBytesRead < length) {
                int bytesRead = inputStream.read(buffer, 0, Math.min(buffer.length, length - totalBytesRead));
                if (bytesRead == -1) break;
                responseBuffer.write(buffer, 0, bytesRead);
                totalBytesRead += bytesRead;
            }

            return responseBuffer.toByteArray();
        }
    }
}



package com.example.kdcproxy;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.io.*;
import java.net.*;
import java.util.Arrays;

@RestController
@RequestMapping("/kdcproxy")
public class KdcProxyController {

    private static final String KDC_HOST = "idm.example.com"; // Укажите хост KDC сервера
    private static final int KDC_PORT = 88; // Порт KDC

    // Метод для получения запроса от клиента и пересылки его на KDC
    @PostMapping(consumes = "application/kerberos", produces = "application/kerberos")
    public ResponseEntity<byte[]> forwardToKdc(@RequestBody byte[] requestData) {
        try {
            // Логирование полученных данных от клиента
            System.out.println("Received request: " + Arrays.toString(requestData));

            if (requestData.length == 0) {
                return ResponseEntity.badRequest().build();  // Если данные пустые — ошибка 400
            }

            byte[] wrappedRequest = wrapRequest(requestData);  // Оборачиваем запрос в нужный формат
            byte[] responseData = sendToKdc(wrappedRequest);   // Отправляем запрос на KDC и получаем ответ

            // Возвращаем ответ от KDC клиенту
            return ResponseEntity.ok()
                    .contentType(MediaType.valueOf("application/kerberos"))
                    .body(responseData);  // Отправляем ответ клиенту
        } catch (IOException e) {
            // Логирование ошибки и возврат ошибки 502, если не удается обработать запрос
            System.err.println("Error while processing the request: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_GATEWAY).build();  // Ошибка 502
        }
    }

    // Метод для оборачивания запроса в KDC Proxy Format
    private byte[] wrapRequest(byte[] requestData) throws IOException {
        ByteArrayOutputStream wrappedRequest = new ByteArrayOutputStream();
        wrappedRequest.write(0x00);  // Версия (0)
        wrappedRequest.write(0x00);  // Зарезервировано (0)
        wrappedRequest.write((requestData.length >> 8) & 0xFF);  // Длина запроса (старший байт)
        wrappedRequest.write(requestData.length & 0xFF);  // Длина запроса (младший байт)
        wrappedRequest.write(requestData);  // Сами данные запроса
        return wrappedRequest.toByteArray();  // Возвращаем обернутый запрос
    }

    // Метод для отправки запроса на KDC и получения ответа
    private byte[] sendToKdc(byte[] requestData) throws IOException {
        try (Socket socket = new Socket(KDC_HOST, KDC_PORT);  // Устанавливаем TCP соединение с KDC
             OutputStream outputStream = socket.getOutputStream();
             InputStream inputStream = socket.getInputStream()) {

            // Логирование отправляемых данных
            System.out.println("Sending request to KDC: " + Arrays.toString(requestData));

            outputStream.write(requestData);  // Отправляем данные на KDC
            outputStream.flush();

            // Чтение ответа от KDC
            byte[] responseBuffer = new byte[4096];
            int bytesRead = inputStream.read(responseBuffer);
            if (bytesRead == -1) {
                throw new IOException("Empty response from KDC");  // Если нет ответа от KDC, ошибка
            }

            // Логирование полученного ответа
            System.out.println("Received response from KDC: " + Arrays.toString(Arrays.copyOf(responseBuffer, bytesRead)));

            return Arrays.copyOf(responseBuffer, bytesRead);  // Возвращаем полученный ответ
        }
    }
}
